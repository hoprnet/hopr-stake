{
  "address": "0x43d13D7B83607F14335cF2cB75E87dA369D056c7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lockToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "boostTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "factorRegistered",
          "type": "bool"
        }
      ],
      "name": "Redeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "actualAmount",
          "type": "uint256"
        }
      ],
      "name": "Released",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardFueled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "actualAmount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "increment",
          "type": "uint256"
        }
      ],
      "name": "Sync",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIC_FACTOR_NUMERATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BOOST_CAP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FACTOR_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOCK_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NFT_CONTRACT",
      "outputs": [
        {
          "internalType": "contract IHoprBoost",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROGRAM_END",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROGRAM_START",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualLockedTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastSyncTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cumulatedRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getCumulatedRewardsIncrement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "nftType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "nftRank",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "hodler",
          "type": "address"
        }
      ],
      "name": "isNftTypeAndRankRedeemed1",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftTypeIndex",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "nftRank",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "hodler",
          "type": "address"
        }
      ],
      "name": "isNftTypeAndRankRedeemed2",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftTypeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "boostNumerator",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "hodler",
          "type": "address"
        }
      ],
      "name": "isNftTypeAndRankRedeemed3",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "nftType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "boostNumerator",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "hodler",
          "type": "address"
        }
      ],
      "name": "isNftTypeAndRankRedeemed4",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onTokenTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "reclaimErc20Tokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "reclaimErc721Tokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "redeemedFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "redeemedFactorIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "redeemedNft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "redeemedNftIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "stakedHoprTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "sync",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "tokensReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "unlockFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x12c81bb2c244f019d3677475944a7ad77946837bc7948b66374d1cabbfbfbb2e",
  "receipt": {
    "to": null,
    "from": "0x3dA21EB3D7d40fEA6bd78c627Cc9B1F59E7481E1",
    "contractAddress": "0x43d13D7B83607F14335cF2cB75E87dA369D056c7",
    "transactionIndex": 0,
    "gasUsed": "2380068",
    "logsBloom": "0x
    "blockHash": "0x6a99915b4f0e88ae100e3d2d984be46cc2224f3d59c897edd0177283692a4bde",
    "transactionHash": "0x12c81bb2c244f019d3677475944a7ad77946837bc7948b66374d1cabbfbfbb2e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6185373,
        "transactionHash": "0x12c81bb2c244f019d3677475944a7ad77946837bc7948b66374d1cabbfbfbb2e",
        "address": "0x43d13D7B83607F14335cF2cB75E87dA369D056c7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003da21eb3d7d40fea6bd78c627cc9b1f59e7481e1"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6a99915b4f0e88ae100e3d2d984be46cc2224f3d59c897edd0177283692a4bde"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6185373,
        "transactionHash": "0x12c81bb2c244f019d3677475944a7ad77946837bc7948b66374d1cabbfbfbb2e",
        "address": "0x43d13D7B83607F14335cF2cB75E87dA369D056c7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000003da21eb3d7d40fea6bd78c627cc9b1f59e7481e1",
          "0x0000000000000000000000003da21eb3d7d40fea6bd78c627cc9b1f59e7481e1"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x6a99915b4f0e88ae100e3d2d984be46cc2224f3d59c897edd0177283692a4bde"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6185373,
        "transactionHash": "0x12c81bb2c244f019d3677475944a7ad77946837bc7948b66374d1cabbfbfbb2e",
        "address": "0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24",
        "topics": [
          "0x93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db153",
          "0x00000000000000000000000043d13d7b83607f14335cf2cb75e87da369d056c7",
          "0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b",
          "0x00000000000000000000000043d13d7b83607f14335cf2cb75e87da369d056c7"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x6a99915b4f0e88ae100e3d2d984be46cc2224f3d59c897edd0177283692a4bde"
      }
    ],
    "blockNumber": 6185373,
    "cumulativeGasUsed": "2380068",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x37C334bD0e87A56301475437927896696F118e4a",
    "0x3dA21EB3D7d40fEA6bd78c627Cc9B1F59E7481E1",
    "0xc252E13B41c0618e3764425Cc8385Aa01ced5449",
    "0x958c1a878779b60F1e2A088FB770cEaA4376bDe0"
  ],
  "solcInputHash": "bcb578af6fde5535822697de7f3b3bc2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boostTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"factorRegistered\",\"type\":\"bool\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardFueled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"increment\",\"type\":\"uint256\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIC_FACTOR_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOST_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTOR_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCK_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFT_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IHoprBoost\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROGRAM_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROGRAM_START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualLockedTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSyncTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumulatedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getCumulatedRewardsIncrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftRank\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"hodler\",\"type\":\"address\"}],\"name\":\"isNftTypeAndRankRedeemed1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTypeIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nftRank\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"hodler\",\"type\":\"address\"}],\"name\":\"isNftTypeAndRankRedeemed2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTypeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostNumerator\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"hodler\",\"type\":\"address\"}],\"name\":\"isNftTypeAndRankRedeemed3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"boostNumerator\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"hodler\",\"type\":\"address\"}],\"name\":\"isNftTypeAndRankRedeemed4\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"reclaimErc20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"reclaimErc721Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"redeemedFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemedFactorIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"redeemedNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemedNftIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"stakedHoprTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unlockFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimRewards(address)\":{\"details\":\"Sync rewards and claim them\",\"params\":{\"account\":\"address Account whose stake rewards will be synced and claimed.\"}},\"constructor\":{\"details\":\"Provide NFT contract address. Transfer owner role to the new owner address.  At deployment, it also registers the lock contract as an ERC777 recipient.\",\"params\":{\"_lockToken\":\"address Address of the stake token xHOPR.\",\"_newOwner\":\"address Address of the new owner. This new owner can reclaim any ERC20 and ERC721 token being accidentally sent to the lock contract. \",\"_nftAddress\":\"address Address of the NFT contract.\",\"_rewardToken\":\"address Address of the reward token wxHOPR.\"}},\"getCumulatedRewardsIncrement(address)\":{\"details\":\"Returns the increment of cumulated rewards during the \\u201clastSyncTimestamp\\u201d and current block.timestamp. \",\"params\":{\"_account\":\"address Address of the account whose rewards will be calculated.\"}},\"isNftTypeAndRankRedeemed1(string,string,address)\":{\"details\":\"Given NFT name type and rank name (as in HoprBoost) returns if the hodler has redeemed such an NFT \",\"params\":{\"hodler\":\"address Address of an account that stakes xHOPR tokens and/or redeems its HoprBoost NFT.\",\"nftRank\":\"string Rank name of the HoprBoost NFT.\",\"nftType\":\"string Type name of the HoprBoost NFT.\"}},\"isNftTypeAndRankRedeemed2(uint256,string,address)\":{\"details\":\"Given NFT type index and rank name (as in HoprBoost) returns if the hodler has redeemed such an NFT \",\"params\":{\"hodler\":\"address Address of an account that stakes xHOPR tokens and/or redeems its HoprBoost NFT.\",\"nftRank\":\"string Rank name of the HoprBoost NFT.\",\"nftTypeIndex\":\"uint256 Type index of the HoprBoost NFT.\"}},\"isNftTypeAndRankRedeemed3(uint256,uint256,address)\":{\"details\":\"Given NFT type index and the boost numerator (as in HoprBoost) returns if the hodler has redeemed such an NFT \",\"params\":{\"boostNumerator\":\"uint256 Boost numerator of the HoprBoost NFT.\",\"hodler\":\"address Address of an account that stakes xHOPR tokens and/or redeems its HoprBoost NFT.\",\"nftTypeIndex\":\"uint256 Type index of the HoprBoost NFT.\"}},\"isNftTypeAndRankRedeemed4(string,uint256,address)\":{\"details\":\"Given NFT type name and the boost numerator (as in HoprBoost) returns if the hodler has redeemed such an NFT \",\"params\":{\"boostNumerator\":\"uint256 Boost numerator of the HoprBoost NFT.\",\"hodler\":\"address Address of an account that stakes xHOPR tokens and/or redeems its HoprBoost NFT.\",\"nftType\":\"string Type name of the HoprBoost NFT.\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever a boost `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} when redeeming, this function is called. Boost factor associated with the  It must return its Solidity selector to confirm the token transfer upon success.\",\"params\":{\"data\":\"bytes hex information provided by the token holder (if any)\",\"from\":\"address token holder address\",\"operator\":\"address operator requesting the transfer\",\"tokenId\":\"uint256 amount of tokens to transfer\"}},\"onTokenTransfer(address,uint256,bytes)\":{\"details\":\"ERC677 hook. Token holders can send their tokens with `transferAndCall` to the stake contract.   After PROGRAM_END, it refuses tokens; Before PROGRAM_END, it accepts tokens xHOPR token, sync  Account state, and update totalLocked. \",\"params\":{\"_data\":\"bytes Data being sent along with token transfer\",\"_from\":\"address Address of tokens sender\",\"_value\":\"uint256 token amount being transferred\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"reclaimErc20Tokens(address)\":{\"details\":\"Reclaim any ERC20 token being accidentally sent to the contract.\",\"params\":{\"tokenAddress\":\"address ERC20 token address.\"}},\"reclaimErc721Tokens(address,uint256)\":{\"details\":\"Reclaim any ERC721 token being accidentally sent to the contract.\",\"params\":{\"tokenAddress\":\"address ERC721 token address.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"stakedHoprTokens(address)\":{\"details\":\"Shortcut that returns the actual stake of an account. \",\"params\":{\"_account\":\"address Address of the staker account.\"}},\"sync(address)\":{\"details\":\"Manually sync account's reward states\",\"params\":{\"account\":\"address Account whose stake rewards will be synced.\"}},\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"details\":\"ERC777 hook. To receive wxHOPR to fuel the reward pool with `send()` method. It updates the availableReward by tokenAmount.\",\"params\":{\"amount\":\"uint256 amount of tokens to transfer\",\"from\":\"address token holder address\",\"operator\":\"address operator requesting the transfer\",\"operatorData\":\"bytes extra information provided by the operator (if any)\",\"to\":\"address recipient address\",\"userData\":\"bytes hex information provided by the token holder (if any)\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlock()\":{\"details\":\"Unlock staking for caller\"},\"unlockFor(address)\":{\"details\":\"Unlock staking for a given account\",\"params\":{\"account\":\"address Account that staked tokens.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimRewards(address)\":{\"notice\":\"public function of ``_sync`` + ``_claim``\"},\"sync(address)\":{\"notice\":\"public function of ``_sync``.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HoprStake2.sol\":\"HoprStake2\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0fd59f83d16f090c27a8105db0f4ad05b0f5d127f9878b82ebf0ad2bbc4e3f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(\\n        address account,\\n        bytes32 _interfaceHash,\\n        address implementer\\n    ) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     * @param account Address of the contract for which to update the cache.\\n     * @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not.\\n     * If the result is not cached a direct lookup on the contract address is performed.\\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     * {updateERC165Cache} with the contract address.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\",\"keccak256\":\"0xdf30b8f2bba82b86661928377f70ba4b68739a799f8bad36e542144811aa70d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x2cc1535d318fe533ffa4ad30de28f5abed305ff748bc72d0344072ac10007e29\",\"license\":\"MIT\"},\"contracts/HoprStake2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./IHoprBoost.sol\\\";\\n\\n/**\\n * \\n */\\ncontract HoprStake2 is Ownable, IERC777Recipient, IERC721Receiver, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using Math for uint256;\\n\\n    struct Account {\\n        uint256 actualLockedTokenAmount; // The amount of LOCK_TOKEN being actually locked to the contract. \\n                                         // Those tokens can be withdrawn after \\u201cUNLOCK_START\\u201d\\n        uint256 lastSyncTimestamp; // Timestamp at which any \\u201cAccount\\u201d attribute gets synced for the last time. \\n        uint256 cumulatedRewards; // Rewards accredited to the account at \\u201clastSyncTimestamp\\u201d.\\n        uint256 claimedRewards; // Rewards claimed by the account.\\n    }\\n\\n    uint256 public constant PROGRAM_START = 1642424400; // Block timestamp at which incentive program starts. Default value is 1642424400 (Jan 17th 2022 14:00 CET).\\n    uint256 public constant PROGRAM_END = 1650974400; // Block timestamp at which incentive program ends. From this timestamp on, tokens can be unlocked. Default value is 1650974400 (Apr 26th 2022 14:00 CET).\\n    uint256 public constant FACTOR_DENOMINATOR = 1e12; // Denominator of the \\u201cBasic reward factor\\u201d. Default value is 1e12.\\n    uint256 public constant BASIC_FACTOR_NUMERATOR = 5787; // Numerator of the \\u201cBasic reward factor\\u201d, for all accounts that participate in the program. Default value is 5787, which corresponds to 5.787/1e9 per second. Its associated denominator is FACTOR_DENOMINATOR. \\n    uint256 public constant BOOST_CAP = 1e24; // Cap on actual locked tokens for receiving additional boosts.\\n\\n    address public LOCK_TOKEN = 0xD057604A14982FE8D88c5fC25Aac3267eA142a08; // Token that HOPR holders need to lock to the contract: xHOPR address.\\n    address public REWARD_TOKEN = 0xD4fdec44DB9D44B8f2b6d529620f9C0C7066A2c1; // Token that HOPR holders can claim as rewards: wxHOPR address\\n    IHoprBoost public NFT_CONTRACT = IHoprBoost(0x43d13D7B83607F14335cF2cB75E87dA369D056c7) ; // Address of the HoprBoost NFT smart contract.\\n\\n    mapping(address=>mapping(uint256=>uint256)) public redeemedNft; // Redeemed NFT per account, structured as \\u201caccount -> index -> NFT tokenId\\u201d.\\n    mapping(address=>uint256) public redeemedNftIndex; // The last index of redeemed NFT of an account. It defines the length of the \\u201credeemedBoostToken mapping.\\n    mapping(address=>mapping(uint256=>uint256)) public redeemedFactor; // Redeemed boost factor per account, structured as \\u201caccount -> index -> NFT tokenId\\u201d.\\n    mapping(address=>uint256) public redeemedFactorIndex; // The last index of redeemed boost factor factor of an account. It defines the length of the \\u201credeemedFactor\\u201d mapping.\\n\\n    mapping(address=>Account) public accounts; // It stores the locked token amount, earned and claimed rewards per account.\\n    uint256 public totalLocked;  // Total amount of tokens being locked in the incentive program.\\n    uint256 public availableReward; // Total amount of reward tokens currently available in the lock.\\n\\n    // setup ERC1820\\n    IERC1820Registry private constant ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n    bytes32 private constant TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\\\"ERC777TokensRecipient\\\");\\n\\n    event Sync(address indexed account, uint256 indexed increment);\\n    event Staked(address indexed account, uint256 indexed actualAmount);\\n    event Released(address indexed account, uint256 indexed actualAmount);\\n    event RewardFueled(uint256 indexed amount);\\n    event Redeemed(address indexed account, uint256 indexed boostTokenId, bool indexed factorRegistered);\\n    event Claimed(address indexed account, uint256 indexed rewardAmount);\\n\\n    /**\\n     * @dev Provide NFT contract address. Transfer owner role to the new owner address. \\n     * At deployment, it also registers the lock contract as an ERC777 recipient.\\n     * @param _nftAddress address Address of the NFT contract.\\n     * @param _newOwner address Address of the new owner. This new owner can reclaim any ERC20 and ERC721 token being accidentally sent to the lock contract. \\n     * @param _lockToken address Address of the stake token xHOPR.\\n     * @param _rewardToken address Address of the reward token wxHOPR.\\n     */\\n    constructor(address _nftAddress, address _newOwner, address _lockToken, address _rewardToken) {\\n        // implement in favor of testing\\n        uint chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        if (chainId != 100) {\\n            LOCK_TOKEN = _lockToken;\\n            REWARD_TOKEN = _rewardToken; \\n            NFT_CONTRACT = IHoprBoost(_nftAddress);\\n        }\\n        transferOwnership(_newOwner);\\n        ERC1820_REGISTRY.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\\n    }\\n\\n    /**\\n     * @dev Given NFT name type and rank name (as in HoprBoost) returns if the hodler has redeemed such an NFT \\n     * @param nftType string Type name of the HoprBoost NFT.\\n     * @param nftRank string Rank name of the HoprBoost NFT.\\n     * @param hodler address Address of an account that stakes xHOPR tokens and/or redeems its HoprBoost NFT.\\n     */\\n    function isNftTypeAndRankRedeemed1(string memory nftType, string memory nftRank, address hodler) external view returns (bool) {\\n        string memory nftURI = string(abi.encodePacked(nftType, \\\"/\\\", nftRank));\\n\\n        // compare `boostType/boosRank` of redeemed NFTs with `nftURI`\\n        for (uint256 index = 0; index < redeemedNftIndex[hodler]; index++) {\\n            uint256 redeemedTokenId = redeemedNft[hodler][index];\\n            string memory redeemedTokenURI = NFT_CONTRACT.tokenURI(redeemedTokenId);\\n            if (_hasSubstring(redeemedTokenURI, nftURI)) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Given NFT type index and rank name (as in HoprBoost) returns if the hodler has redeemed such an NFT \\n     * @param nftTypeIndex uint256 Type index of the HoprBoost NFT.\\n     * @param nftRank string Rank name of the HoprBoost NFT.\\n     * @param hodler address Address of an account that stakes xHOPR tokens and/or redeems its HoprBoost NFT.\\n     */\\n    function isNftTypeAndRankRedeemed2(uint256 nftTypeIndex, string memory nftRank, address hodler) external view returns (bool) {\\n        // compare `boostType/boosRank` of redeemed NFTs with `nftURI`\\n        for (uint256 index = 0; index < redeemedNftIndex[hodler]; index++) {\\n            uint256 redeemedTokenId = redeemedNft[hodler][index];\\n            string memory redeemedTokenURI = NFT_CONTRACT.tokenURI(redeemedTokenId);\\n            if (NFT_CONTRACT.typeIndexOf(redeemedTokenId) == nftTypeIndex && _hasSubstring(redeemedTokenURI, nftRank)) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Given NFT type index and the boost numerator (as in HoprBoost) returns if the hodler has redeemed such an NFT \\n     * @param nftTypeIndex uint256 Type index of the HoprBoost NFT.\\n     * @param boostNumerator uint256 Boost numerator of the HoprBoost NFT.\\n     * @param hodler address Address of an account that stakes xHOPR tokens and/or redeems its HoprBoost NFT.\\n     */\\n    function isNftTypeAndRankRedeemed3(uint256 nftTypeIndex, uint256 boostNumerator, address hodler) external view returns (bool) {\\n        for (uint256 index = 0; index < redeemedNftIndex[hodler]; index++) {\\n            uint256 redeemedTokenId = redeemedNft[hodler][index];\\n            (uint256 redeemedBoost, ) = NFT_CONTRACT.boostOf(redeemedTokenId);\\n            if (NFT_CONTRACT.typeIndexOf(redeemedTokenId) == nftTypeIndex && boostNumerator == redeemedBoost) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Given NFT type name and the boost numerator (as in HoprBoost) returns if the hodler has redeemed such an NFT \\n     * @param nftType string Type name of the HoprBoost NFT.\\n     * @param boostNumerator uint256 Boost numerator of the HoprBoost NFT.\\n     * @param hodler address Address of an account that stakes xHOPR tokens and/or redeems its HoprBoost NFT.\\n     */\\n    function isNftTypeAndRankRedeemed4(string memory nftType, uint256 boostNumerator, address hodler) external view returns (bool) {\\n        for (uint256 index = 0; index < redeemedNftIndex[hodler]; index++) {\\n            uint256 redeemedTokenId = redeemedNft[hodler][index];\\n            (uint256 redeemedBoost, ) = NFT_CONTRACT.boostOf(redeemedTokenId);\\n            if (keccak256((bytes(NFT_CONTRACT.typeOf(redeemedTokenId)))) == keccak256((bytes(nftType))) && boostNumerator == redeemedBoost) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev ERC677 hook. Token holders can send their tokens with `transferAndCall` to the stake contract.  \\n     * After PROGRAM_END, it refuses tokens; Before PROGRAM_END, it accepts tokens xHOPR token, sync \\n     * Account state, and update totalLocked. \\n     * @param _from address Address of tokens sender\\n     * @param _value uint256 token amount being transferred\\n     * @param _data bytes Data being sent along with token transfer\\n     */\\n    function onTokenTransfer(\\n        address _from, \\n        uint256 _value, \\n        // solhint-disable-next-line no-unused-vars\\n        bytes memory _data\\n    ) external returns (bool) {\\n        require(msg.sender == LOCK_TOKEN, \\\"HoprStake: Only accept LOCK_TOKEN in staking\\\");\\n        require(block.timestamp <= PROGRAM_END, \\\"HoprStake: Program ended, cannot stake anymore.\\\");\\n\\n        _sync(_from);\\n        accounts[_from].actualLockedTokenAmount += _value;\\n        totalLocked += _value;\\n        emit Staked(_from, _value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev ERC777 hook. To receive wxHOPR to fuel the reward pool with `send()` method. It updates the availableReward by tokenAmount.\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes hex information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function tokensReceived(\\n        // solhint-disable-next-line no-unused-vars\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        // solhint-disable-next-line no-unused-vars\\n        bytes calldata userData,\\n        // solhint-disable-next-line no-unused-vars\\n        bytes calldata operatorData\\n    ) external override {\\n        require(msg.sender == REWARD_TOKEN, \\\"HoprStake: Sender must be wxHOPR token\\\");\\n        require(to == address(this), \\\"HoprStake: Must be sending tokens to HoprStake contract\\\");\\n        require(from == owner(), \\\"HoprStake: Only accept owner to provide rewards\\\");\\n        availableReward += amount;\\n        emit RewardFueled(amount);\\n    }\\n\\n    /**\\n     * @dev Whenever a boost `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * when redeeming, this function is called. Boost factor associated with the \\n     * It must return its Solidity selector to confirm the token transfer upon success.\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param tokenId uint256 amount of tokens to transfer\\n     * @param data bytes hex information provided by the token holder (if any)\\n     */\\n    function onERC721Received(\\n        // solhint-disable-next-line no-unused-vars\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        // solhint-disable-next-line no-unused-vars\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        require(_msgSender() == address(NFT_CONTRACT), \\\"HoprStake: Cannot SafeTransferFrom tokens other than HoprBoost.\\\");\\n        require(block.timestamp <= PROGRAM_END, \\\"HoprStake: Program ended, cannot redeem boosts.\\\");\\n        // Account memory account = accounts[from];\\n        _sync(from);\\n\\n        // redeem NFT\\n        redeemedNft[from][redeemedNftIndex[from]] = tokenId;\\n        redeemedNftIndex[from] += 1;\\n\\n        // update boost factor\\n        uint256 typeId = NFT_CONTRACT.typeIndexOf(tokenId);\\n        (uint256 factor, ) = NFT_CONTRACT.boostOf(tokenId);\\n\\n        uint256 boostIndex = redeemedFactorIndex[from];\\n        uint256 index = 0;\\n        for (index; index < boostIndex; index++) {\\n            // loop through redeemed factors, replace the factor of the same type, if the current factor is larger.\\n            uint256 redeemedId = redeemedFactor[from][index];\\n            (uint256 redeemedFactorValue, ) = NFT_CONTRACT.boostOf(redeemedId);\\n\\n            if (NFT_CONTRACT.typeIndexOf(redeemedId) == typeId) {\\n                if (redeemedFactorValue < factor) {\\n                    redeemedFactor[from][index] = tokenId;\\n                }\\n                emit Redeemed(from, tokenId, redeemedFactorValue < factor);\\n                break;\\n            }\\n        }\\n        if (index == boostIndex) {\\n            // new type being redeemed.\\n            redeemedFactor[from][boostIndex] = tokenId;\\n            redeemedFactorIndex[from] += 1;\\n            emit Redeemed(from, tokenId, true);\\n        }\\n\\n        return IERC721Receiver(address(this)).onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev Manually sync account's reward states\\n     * @notice public function of ``_sync``.\\n     * @param account address Account whose stake rewards will be synced.\\n     */\\n    function sync(address account) external {\\n        _sync(account); \\n    }\\n\\n    /**\\n     * @dev Sync rewards and claim them\\n     * @notice public function of ``_sync`` + ``_claim``\\n     * @param account address Account whose stake rewards will be synced and claimed.\\n     */\\n    function claimRewards(address account) external {\\n        _sync(account); \\n        _claim(account);\\n    }\\n\\n    /**\\n     * @dev Unlock staking for caller\\n     */\\n    function unlock() external {\\n        _unlockFor(msg.sender);\\n    }\\n    /**\\n     * @dev Unlock staking for a given account\\n     * @param account address Account that staked tokens.\\n     */\\n    function unlockFor(address account) external {\\n        _unlockFor(account);\\n    }\\n\\n    /**\\n     * @dev Reclaim any ERC20 token being accidentally sent to the contract.\\n     * @param tokenAddress address ERC20 token address.\\n     */\\n    function reclaimErc20Tokens(address tokenAddress) external onlyOwner nonReentrant {\\n        uint256 difference;\\n        if (tokenAddress == LOCK_TOKEN) {\\n            difference = IERC20(LOCK_TOKEN).balanceOf(address(this)) - totalLocked;\\n        } else {\\n            difference = IERC20(tokenAddress).balanceOf(address(this));\\n        }\\n        IERC20(tokenAddress).safeTransfer(owner(), difference);\\n    }\\n\\n    /**\\n     * @dev Reclaim any ERC721 token being accidentally sent to the contract.\\n     * @param tokenAddress address ERC721 token address.\\n     */\\n    function reclaimErc721Tokens(address tokenAddress, uint256 tokenId) external onlyOwner nonReentrant {\\n        require(tokenAddress != address(NFT_CONTRACT), \\\"HoprStake: Cannot claim HoprBoost NFT\\\");\\n        IHoprBoost(tokenAddress).transferFrom(address(this), owner(), tokenId);\\n    }\\n\\n    /**\\n     * @dev Shortcut that returns the actual stake of an account. \\n     * @param _account address Address of the staker account.\\n     */\\n    function stakedHoprTokens(address _account) public view returns (uint256) {\\n        return accounts[_account].actualLockedTokenAmount;\\n    }\\n\\n    /**\\n     * @dev Returns the increment of cumulated rewards during the \\u201clastSyncTimestamp\\u201d and current block.timestamp. \\n     * @param _account address Address of the account whose rewards will be calculated.\\n     */\\n    function getCumulatedRewardsIncrement(address _account) public view returns (uint256) {\\n        return _getCumulatedRewardsIncrement(_account);\\n    }\\n\\n    /**\\n     * @dev Calculates the increment of cumulated rewards during the \\u201clastSyncTimestamp\\u201d and block.timestamp. \\n     * current block timestamp and lastSyncTimestamp are confined in [PROGRAM_START, PROGRAM_END] for basic and boosted lockup,\\n     * @param _account address Address of the account whose rewards will be calculated.\\n     */\\n    function _getCumulatedRewardsIncrement(address _account) private view returns (uint256) {\\n        Account memory account = accounts[_account];\\n        if (block.timestamp <= PROGRAM_START || account.lastSyncTimestamp >= PROGRAM_END) {\\n            // skip calculation and return directly 0;\\n            return 0;\\n        }\\n        // Per second gain, for basic lock-up.\\n        uint256 gainPerSec = account.actualLockedTokenAmount * BASIC_FACTOR_NUMERATOR;\\n        \\n        // Per second gain, for additional boost, applicable to amount under BOOST_CAP\\n        for (uint256 index = 0; index < redeemedFactorIndex[_account]; index++) {\\n            uint256 tokenId = redeemedFactor[_account][index];\\n            (uint256 boost, ) = NFT_CONTRACT.boostOf(tokenId);\\n            gainPerSec += (account.actualLockedTokenAmount.min(BOOST_CAP)) * boost;\\n        }\\n\\n        return (\\n                gainPerSec * (\\n                    block.timestamp.max(PROGRAM_START).min(PROGRAM_END) - \\n                    account.lastSyncTimestamp.max(PROGRAM_START).min(PROGRAM_END)\\n                )\\n            ) / FACTOR_DENOMINATOR;\\n    }\\n\\n    /**\\n     * @dev if the given `tokenURI` end with `/substring` \\n     * @param tokenURI string URI of the HoprBoost NFT. E.g. \\\"https://stake.hoprnet.org/PuzzleHunt_v2/Bronze - Week 5\\\"\\n     * @param substring string of the `boostRank` or `boostType/boostRank`. E.g. \\\"Bronze - Week 5\\\", \\\"PuzzleHunt_v2/Bronze - Week 5\\\"\\n     */\\n    function _hasSubstring(string memory tokenURI, string memory substring) private pure returns (bool) {\\n        // convert string to bytes\\n        bytes memory tokenURIInBytes = bytes(tokenURI);\\n        bytes memory substringInBytes = bytes(substring);\\n        \\n        // lenghth of tokenURI is the sum of substringLen and restLen, where\\n        // - `substringLen` is the length of the part that is extracted and compared with the provided substring\\n        // - `restLen` is the length of the baseURI and boostType, which will be offset\\n        uint256 substringLen = substringInBytes.length;\\n        uint256 restLen = tokenURIInBytes.length - substringLen;\\n        // one byte before the supposed substring, to see if it's the start of `substring`\\n        bytes1 slashPositionContent = tokenURIInBytes[restLen - 1];\\n\\n        if (slashPositionContent != 0x2f) {\\n            // if this position is not a `/`, substring in the tokenURI is for sure neither `boostRank` nor `boostType/boostRank`\\n            return false;\\n        }\\n\\n        // offset so that value from the next calldata (`substring`) is removed, so bitwise it needs to shift\\n        // log2(16) * (32 - substringLen) * 2\\n        uint256 offset = (32 - substringLen) * 8;\\n\\n        bytes32 trimed; // left-padded extracted `boostRank` from the `tokenURI`\\n        bytes32 substringInBytes32 = bytes32(substringInBytes);   // convert substring in to bytes32\\n        bytes32 shifted; // shift the substringInBytes32 from right-padded to left-padded\\n        \\n        bool result;\\n        assembly {\\n            // assuming `boostRank` or `boostType/boostRank` will never exceed 32 bytes\\n            // left-pad the `boostRank` extracted from the `tokenURI`, so that possible\\n            // extra pieces of `substring` is not included\\n            // 32 jumps the storage of bytes length and restLen offsets the `baseURI`\\n            trimed := shr(offset, mload(add(add(tokenURIInBytes, 32), restLen)))\\n            // tokenURIInBytes32 := mload(add(add(tokenURIInBytes, 32), restLen))\\n            // left-pad `substring`\\n            shifted := shr(offset, substringInBytes32)\\n            // compare results\\n            result := eq(trimed, shifted)\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Update \\u201clastSyncTimestamp\\u201d with the current block timestamp and update \\u201ccumulatedRewards\\u201d with _getCumulatedRewardsIncrement(account) \\n     * @param _account address Address of the account whose rewards will be calculated.\\n     */\\n    function _sync(address _account) private {\\n        uint256 increment = _getCumulatedRewardsIncrement(_account);\\n        accounts[_account].cumulatedRewards += increment;\\n        accounts[_account].lastSyncTimestamp = block.timestamp;\\n        emit Sync(_account, increment);\\n    }\\n\\n    /**\\n     * @dev Claim rewards for staking.\\n     * @param _account address Address of the staking account.\\n     */\\n    function _claim(address _account) private {\\n        Account memory account = accounts[_account];\\n        // update states\\n        uint256 amount = account.cumulatedRewards - account.claimedRewards;\\n        require(amount > 0, \\\"HoprStake: Nothing to claim\\\");\\n        accounts[_account].claimedRewards = accounts[_account].cumulatedRewards;\\n        require(availableReward >= amount, \\\"HoprStake: Insufficient reward pool.\\\");\\n        availableReward -= amount;\\n        // send rewards to the account.\\n        IERC20(REWARD_TOKEN).safeTransfer(_account, amount);\\n        emit Claimed(_account, amount);\\n    }\\n\\n    /**\\n     * @dev Unlock staking for a given account\\n     * @param _account address Account that staked tokens.\\n     */\\n    function _unlockFor(address _account) private {\\n        require(block.timestamp > PROGRAM_END, \\\"HoprStake: Program is ongoing, cannot unlock stake.\\\");\\n        uint256 actualStake = accounts[_account].actualLockedTokenAmount;\\n        _sync(_account); \\n        accounts[_account].actualLockedTokenAmount = 0;\\n        totalLocked -= actualStake;\\n        _claim(_account);\\n        // unlock actual staked tokens\\n        IERC20(LOCK_TOKEN).safeTransfer(_account, actualStake);\\n        // unlock redeemed NFTs\\n        for (uint256 index = 0; index < redeemedNftIndex[_account]; index++) {\\n            NFT_CONTRACT.transferFrom(address(this), _account, redeemedNft[_account][index]);\\n        }\\n        emit Released(_account, actualStake);\\n    }\\n}\",\"keccak256\":\"0x691a469327b5fe6cd50887ceeebac01208888d0475b71fc43ade4d41031df570\",\"license\":\"GPL-3.0-only\"},\"contracts/IHoprBoost.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IHoprBoost is IERC721Metadata {\\n    /**\\n     * @dev Returns the boost factor and the redeem deadline associated with ``tokenId``.\\n     * @param tokenId uint256 token Id of the boost.\\n     */\\n    function boostOf(uint256 tokenId) external view returns (uint256, uint256);\\n    \\n    /**\\n     * @dev Returns the boost type associated with ``tokenId``.\\n     * @param tokenId uint256 token Id of the boost.\\n     */\\n    function typeOf(uint256 tokenId) external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the boost type index associated with ``tokenId``.\\n     * @param tokenId uint256 token Id of the boost.\\n     */\\n    function typeIndexOf(uint256 tokenId) external view returns (uint256);\\n}\",\"keccak256\":\"0xdf7974d91e5dae2d2645a8668fc924d51b3ae758de327e00987946840356adf6\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6080604052600280546001600160a01b031990811673d057604a14982fe8d88c5fc25aac3267ea142a081790915560038054821673d4fdec44db9d44b8f2b6d529620f9c0c7066a2c1179055600480549091167343d13d7b83607f14335cf2cb75e87da369d056c71790553480156200007757600080fd5b5060405162002a7e38038062002a7e8339810160408190526200009a91620002dc565b620000a5336200019a565b600180554660648114620000f157600280546001600160a01b038086166001600160a01b0319928316179092556003805485841690831617905560048054928816929091169190911790555b620000fc84620001ea565b6040516329965a1d60e01b815230600482018190527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b1580156200017657600080fd5b505af11580156200018b573d6000803e3d6000fd5b50505050505050505062000339565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146200024a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b038116620002b15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000241565b620002bc816200019a565b50565b80516001600160a01b0381168114620002d757600080fd5b919050565b60008060008060808587031215620002f357600080fd5b620002fe85620002bf565b93506200030e60208601620002bf565b92506200031e60408601620002bf565b91506200032e60608601620002bf565b905092959194509250565b61273580620003496000396000f3fe608060405234801561001057600080fd5b50600436106101fa5760003560e01c80638c24add41161011a578063cbffa3c7116100ad578063dde499791161007c578063dde49979146104a8578063ef0526a2146104bb578063ef5cfb8c146104cc578063f2fde38b146104df578063f978fff1146104f257600080fd5b8063cbffa3c714610457578063ce23177e14610462578063d0c02d6314610475578063d0da68011461049557600080fd5b8063a4c0ed36116100e9578063a4c0ed3614610416578063a584119414610429578063a69df4b51461043c578063a83d1ed61461044457600080fd5b80638c24add4146103bc5780638da5cb5b146103df57806396a9cd7d146103f057806399248ea71461040357600080fd5b80635bbb63a6116101925780636aa8d4cf116101615780636aa8d4cf1461036d57806370af093414610376578063715018a61461038957806381128c1d1461039157600080fd5b80635bbb63a6146102ee5780635e5c06e2146102f95780635ef73d581461034e5780636067bc151461035a57600080fd5b80631fda9a02116101ce5780631fda9a021461029e57806348c64e41146102c95780634ad84b34146102dc57806356891412146102e557600080fd5b806223de29146101ff5780630a1a257a14610214578063150b7a02146102525780631f014d831461027e575b600080fd5b61021261020d366004612110565b61051b565b005b61023f61022236600461222a565b600560209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b6102656102603660046121bb565b6106c8565b6040516001600160e01b03199091168152602001610249565b61023f61028c3660046120f5565b60086020526000908152604090205481565b6004546102b1906001600160a01b031681565b6040516001600160a01b039091168152602001610249565b6102126102d736600461222a565b610b7d565b61023f600b5481565b61023f600a5481565b61023f6361e5685081565b61032e6103073660046120f5565b60096020526000908152604090208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610249565b61023f64e8d4a5100081565b6102126103683660046120f5565b610cfc565b61023f61169b81565b61023f6103843660046120f5565b610ece565b610212610edf565b61023f61039f36600461222a565b600760209081526000928352604080842090915290825290205481565b6103cf6103ca3660046123cc565b610f15565b6040519015158152602001610249565b6000546001600160a01b03166102b1565b6103cf6103fe366004612433565b6110a5565b6003546102b1906001600160a01b031681565b6103cf610424366004612254565b611220565b6102126104373660046120f5565b61138d565b610212611399565b6103cf610452366004612496565b6113a2565b61023f636267dec081565b6103cf610470366004612358565b611513565b61023f6104833660046120f5565b60066020526000908152604090205481565b6002546102b1906001600160a01b031681565b6102126104b63660046120f5565b61163c565b61023f69d3c21bcecceda100000081565b6102126104da3660046120f5565b611645565b6102126104ed3660046120f5565b611657565b61023f6105003660046120f5565b6001600160a01b031660009081526009602052604090205490565b6003546001600160a01b031633146105895760405162461bcd60e51b815260206004820152602660248201527f486f70725374616b653a2053656e646572206d757374206265207778484f5052604482015265103a37b5b2b760d11b60648201526084015b60405180910390fd5b6001600160a01b03861630146106075760405162461bcd60e51b815260206004820152603760248201527f486f70725374616b653a204d7573742062652073656e64696e6720746f6b656e60448201527f7320746f20486f70725374616b6520636f6e74726163740000000000000000006064820152608401610580565b6000546001600160a01b0388811691161461067c5760405162461bcd60e51b815260206004820152602f60248201527f486f70725374616b653a204f6e6c7920616363657074206f776e657220746f2060448201526e70726f76696465207265776172647360881b6064820152608401610580565b84600b600082825461068e91906125db565b909155505060405185907f2bf52bcae319602514e02ff69bbe4b89a19718b96e7867044128ec872419437c90600090a25050505050505050565b6004546000906001600160a01b0316336001600160a01b0316146107545760405162461bcd60e51b815260206004820152603f60248201527f486f70725374616b653a2043616e6e6f7420536166655472616e73666572467260448201527f6f6d20746f6b656e73206f74686572207468616e20486f7072426f6f73742e006064820152608401610580565b636267dec04211156107c05760405162461bcd60e51b815260206004820152602f60248201527f486f70725374616b653a2050726f6772616d20656e6465642c2063616e6e6f7460448201526e103932b232b2b6903137b7b9ba399760891b6064820152608401610580565b6107c9856116ef565b6001600160a01b03851660008181526005602090815260408083206006808452828520805486529184529184208990559383529052815460019291906108109084906125db565b90915550506004805460405163562317c560e01b81529182018690526000916001600160a01b039091169063562317c59060240160206040518083038186803b15801561085c57600080fd5b505afa158015610870573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610894919061241a565b6004805460405163225b377d60e21b81529182018890529192506000916001600160a01b03169063896cddf490602401604080518083038186803b1580156108db57600080fd5b505afa1580156108ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109139190612472565b506001600160a01b0388166000908152600860205260408120549192505b81811015610adf576001600160a01b0389811660009081526007602090815260408083208584529091528082205460048054925163225b377d60e21b81529081018290529093919091169063896cddf490602401604080518083038186803b15801561099c57600080fd5b505afa1580156109b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d49190612472565b506004805460405163562317c560e01b815291820185905291925087916001600160a01b03169063562317c59060240160206040518083038186803b158015610a1c57600080fd5b505afa158015610a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a54919061241a565b1415610aca5784811015610a89576001600160a01b038b16600090815260076020908152604080832086845290915290208a90555b604051858210908b906001600160a01b038e16907f066d96cb280fccf3a0a3a5686966a801b2690a32ec98fd2711a4e09f345d935d90600090a45050610adf565b50508080610ad7906126a2565b915050610931565b81811415610b67576001600160a01b038916600081815260076020908152604080832086845282528083208c905592825260089052908120805460019290610b289084906125db565b909155505060405160019089906001600160a01b038c16907f066d96cb280fccf3a0a3a5686966a801b2690a32ec98fd2711a4e09f345d935d90600090a45b50630a85bd0160e11b9998505050505050505050565b6000546001600160a01b03163314610ba75760405162461bcd60e51b81526004016105809061254d565b60026001541415610bfa5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610580565b60026001556004546001600160a01b0383811691161415610c6b5760405162461bcd60e51b815260206004820152602560248201527f486f70725374616b653a2043616e6e6f7420636c61696d20486f7072426f6f736044820152641d0813919560da1b6064820152608401610580565b816001600160a01b03166323b872dd30610c8d6000546001600160a01b031690565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101849052606401600060405180830381600087803b158015610cdc57600080fd5b505af1158015610cf0573d6000803e3d6000fd5b50506001805550505050565b6000546001600160a01b03163314610d265760405162461bcd60e51b81526004016105809061254d565b60026001541415610d795760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610580565b60026001819055546000906001600160a01b0383811691161415610e2657600a546002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610ddd57600080fd5b505afa158015610df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e15919061241a565b610e1f9190612634565b9050610ea0565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b158015610e6557600080fd5b505afa158015610e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9d919061241a565b90505b610ec6610eb56000546001600160a01b031690565b6001600160a01b038416908361177a565b505060018055565b6000610ed9826117d1565b92915050565b6000546001600160a01b03163314610f095760405162461bcd60e51b81526004016105809061254d565b610f1360006119c7565b565b6000805b6001600160a01b038316600090815260066020526040902054811015611098576001600160a01b0383811660009081526005602090815260408083208584529091528082205460048054925163225b377d60e21b81529081018290529093919091169063896cddf490602401604080518083038186803b158015610f9c57600080fd5b505afa158015610fb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd49190612472565b50875160208901206004805460405163c588ff8b60e01b815291820186905292935090916001600160a01b03169063c588ff8b9060240160006040518083038186803b15801561102357600080fd5b505afa158015611037573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261105f91908101906122e1565b8051906020012014801561107257508086145b15611083576001935050505061109e565b50508080611090906126a2565b915050610f19565b50600090505b9392505050565b6000805b6001600160a01b038316600090815260066020526040902054811015611098576001600160a01b0383811660009081526005602090815260408083208584529091528082205460048054925163c87b56dd60e01b81529081018290529093919091169063c87b56dd9060240160006040518083038186803b15801561112d57600080fd5b505afa158015611141573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261116991908101906122e1565b6004805460405163562317c560e01b815291820185905291925088916001600160a01b03169063562317c59060240160206040518083038186803b1580156111b057600080fd5b505afa1580156111c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e8919061241a565b1480156111fa57506111fa8187611a17565b1561120b576001935050505061109e565b50508080611218906126a2565b9150506110a9565b6002546000906001600160a01b031633146112925760405162461bcd60e51b815260206004820152602c60248201527f486f70725374616b653a204f6e6c7920616363657074204c4f434b5f544f4b4560448201526b4e20696e207374616b696e6760a01b6064820152608401610580565b636267dec04211156112fe5760405162461bcd60e51b815260206004820152602f60248201527f486f70725374616b653a2050726f6772616d20656e6465642c2063616e6e6f7460448201526e1039ba30b5b29030b73cb6b7b9329760891b6064820152608401610580565b611307846116ef565b6001600160a01b0384166000908152600960205260408120805485929061132f9084906125db565b9250508190555082600a600082825461134891906125db565b909155505060405183906001600160a01b038616907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d90600090a35060019392505050565b611396816116ef565b50565b610f1333611ac0565b6000805b6001600160a01b038316600090815260066020526040902054811015611098576001600160a01b0383811660009081526005602090815260408083208584529091528082205460048054925163225b377d60e21b81529081018290529093919091169063896cddf490602401604080518083038186803b15801561142957600080fd5b505afa15801561143d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114619190612472565b506004805460405163562317c560e01b815291820185905291925088916001600160a01b03169063562317c59060240160206040518083038186803b1580156114a957600080fd5b505afa1580156114bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e1919061241a565b1480156114ed57508086145b156114fe576001935050505061109e565b5050808061150b906126a2565b9150506113a6565b60008084846040516020016115299291906124de565b604051602081830303815290604052905060005b6001600160a01b038416600090815260066020526040902054811015611630576001600160a01b0384811660009081526005602090815260408083208584529091528082205460048054925163c87b56dd60e01b81529081018290529093919091169063c87b56dd9060240160006040518083038186803b1580156115c157600080fd5b505afa1580156115d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115fd91908101906122e1565b90506116098185611a17565b1561161b57600194505050505061109e565b50508080611628906126a2565b91505061153d565b50600095945050505050565b61139681611ac0565b61164e816116ef565b61139681611c9e565b6000546001600160a01b031633146116815760405162461bcd60e51b81526004016105809061254d565b6001600160a01b0381166116e65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610580565b611396816119c7565b60006116fa826117d1565b6001600160a01b03831660009081526009602052604081206002018054929350839290919061172a9084906125db565b90915550506001600160a01b03821660008181526009602052604080822042600190910155518392917f99869d968ca3581a661f31abb3a6aa70ccec5cdc49855eab174cf9e00a2462db91a35050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526117cc908490611e2f565b505050565b6001600160a01b03811660009081526009602090815260408083208151608081018352815481526001820154938101939093526002810154918301919091526003015460608201526361e56850421115806118345750636267dec0816020015110155b156118425750600092915050565b80516000906118549061169b90612615565b905060005b6001600160a01b03851660009081526008602052604090205481101561195b576001600160a01b0385811660009081526007602090815260408083208584529091528082205460048054925163225b377d60e21b81529081018290529093919091169063896cddf490602401604080518083038186803b1580156118dc57600080fd5b505afa1580156118f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119149190612472565b50855190915081906119309069d3c21bcecceda1000000611f01565b61193a9190612615565b61194490856125db565b935050508080611953906126a2565b915050611859565b5064e8d4a5100061198b636267dec06119856361e568508660200151611f1790919063ffffffff16565b90611f01565b6119a1636267dec0611985426361e56850611f17565b6119ab9190612634565b6119b59083612615565b6119bf91906125f3565b949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051825160009184918491908490611a30908390612634565b9050600084611a40600184612634565b81518110611a5057611a506126d3565b01602001516001600160f81b0319169050602f60f81b8114611a7a57600095505050505050610ed9565b6000611a87846020612634565b611a92906008612615565b9050600080611aa08761264b565b979094016020015196821c9690911c959095149550505050505092915050565b636267dec04211611b2f5760405162461bcd60e51b815260206004820152603360248201527f486f70725374616b653a2050726f6772616d206973206f6e676f696e672c206360448201527230b73737ba103ab73637b1b59039ba30b5b29760691b6064820152608401610580565b6001600160a01b038116600090815260096020526040902054611b51826116ef565b6001600160a01b0382166000908152600960205260408120819055600a8054839290611b7e908490612634565b90915550611b8d905082611c9e565b600254611ba4906001600160a01b0316838361177a565b60005b6001600160a01b038316600090815260066020526040902054811015611c6357600480546001600160a01b038581166000818152600560209081526040808320888452909152908190205490516323b872dd60e01b815230958101959095526024850191909152604484015216906323b872dd90606401600060405180830381600087803b158015611c3857600080fd5b505af1158015611c4c573d6000803e3d6000fd5b505050508080611c5b906126a2565b915050611ba7565b5060405181906001600160a01b038416907fb21fb52d5749b80f3182f8c6992236b5e5576681880914484d7f4c9b062e619e90600090a35050565b6001600160a01b038116600090815260096020908152604080832081516080810183528154815260018201549381019390935260028101549183018290526003015460608301819052919291611cf391612634565b905060008111611d455760405162461bcd60e51b815260206004820152601b60248201527f486f70725374616b653a204e6f7468696e6720746f20636c61696d00000000006044820152606401610580565b6001600160a01b03831660009081526009602052604090206002810154600390910155600b54811115611dc65760405162461bcd60e51b8152602060048201526024808201527f486f70725374616b653a20496e73756666696369656e7420726577617264207060448201526337b7b61760e11b6064820152608401610580565b80600b6000828254611dd89190612634565b9091555050600354611df4906001600160a01b0316848361177a565b60405181906001600160a01b038516907fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a90600090a3505050565b6000611e84826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611f279092919063ffffffff16565b8051909150156117cc5780806020019051810190611ea291906122bf565b6117cc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610580565b6000818310611f10578161109e565b5090919050565b600081831015611f10578161109e565b60606119bf848460008585843b611f805760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610580565b600080866001600160a01b03168587604051611f9c91906124c2565b60006040518083038185875af1925050503d8060008114611fd9576040519150601f19603f3d011682016040523d82523d6000602084013e611fde565b606091505b5091509150611fee828286611ff9565b979650505050505050565b6060831561200857508161109e565b8251156120185782518084602001fd5b8160405162461bcd60e51b8152600401610580919061251a565b6000612045612040846125b3565b612582565b905082815283838301111561205957600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b038116811461208757600080fd5b919050565b60008083601f84011261209e57600080fd5b50813567ffffffffffffffff8111156120b657600080fd5b6020830191508360208285010111156120ce57600080fd5b9250929050565b600082601f8301126120e657600080fd5b61109e83833560208501612032565b60006020828403121561210757600080fd5b61109e82612070565b60008060008060008060008060c0898b03121561212c57600080fd5b61213589612070565b975061214360208a01612070565b965061215160408a01612070565b955060608901359450608089013567ffffffffffffffff8082111561217557600080fd5b6121818c838d0161208c565b909650945060a08b013591508082111561219a57600080fd5b506121a78b828c0161208c565b999c989b5096995094979396929594505050565b6000806000806000608086880312156121d357600080fd5b6121dc86612070565b94506121ea60208701612070565b935060408601359250606086013567ffffffffffffffff81111561220d57600080fd5b6122198882890161208c565b969995985093965092949392505050565b6000806040838503121561223d57600080fd5b61224683612070565b946020939093013593505050565b60008060006060848603121561226957600080fd5b61227284612070565b925060208401359150604084013567ffffffffffffffff81111561229557600080fd5b8401601f810186136122a657600080fd5b6122b586823560208401612032565b9150509250925092565b6000602082840312156122d157600080fd5b8151801515811461109e57600080fd5b6000602082840312156122f357600080fd5b815167ffffffffffffffff81111561230a57600080fd5b8201601f8101841361231b57600080fd5b8051612329612040826125b3565b81815285602083850101111561233e57600080fd5b61234f826020830160208601612672565b95945050505050565b60008060006060848603121561236d57600080fd5b833567ffffffffffffffff8082111561238557600080fd5b612391878388016120d5565b945060208601359150808211156123a757600080fd5b506123b4868287016120d5565b9250506123c360408501612070565b90509250925092565b6000806000606084860312156123e157600080fd5b833567ffffffffffffffff8111156123f857600080fd5b612404868287016120d5565b935050602084013591506123c360408501612070565b60006020828403121561242c57600080fd5b5051919050565b60008060006060848603121561244857600080fd5b83359250602084013567ffffffffffffffff81111561246657600080fd5b6123b4868287016120d5565b6000806040838503121561248557600080fd5b505080516020909101519092909150565b6000806000606084860312156124ab57600080fd5b83359250602084013591506123c360408501612070565b600082516124d4818460208701612672565b9190910192915050565b600083516124f0818460208801612672565b602f60f81b908301908152835161250e816001840160208801612672565b01600101949350505050565b6020815260008251806020840152612539816040850160208701612672565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b604051601f8201601f1916810167ffffffffffffffff811182821017156125ab576125ab6126e9565b604052919050565b600067ffffffffffffffff8211156125cd576125cd6126e9565b50601f01601f191660200190565b600082198211156125ee576125ee6126bd565b500190565b60008261261057634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561262f5761262f6126bd565b500290565b600082821015612646576126466126bd565b500390565b8051602080830151919081101561266c576000198160200360031b1b821691505b50919050565b60005b8381101561268d578181015183820152602001612675565b8381111561269c576000848401525b50505050565b60006000198214156126b6576126b66126bd565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212205b684efa8e233e1f11428f6274d12b8ebf723e5538d70adb8c088f6de384207264736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fa5760003560e01c80638c24add41161011a578063cbffa3c7116100ad578063dde499791161007c578063dde49979146104a8578063ef0526a2146104bb578063ef5cfb8c146104cc578063f2fde38b146104df578063f978fff1146104f257600080fd5b8063cbffa3c714610457578063ce23177e14610462578063d0c02d6314610475578063d0da68011461049557600080fd5b8063a4c0ed36116100e9578063a4c0ed3614610416578063a584119414610429578063a69df4b51461043c578063a83d1ed61461044457600080fd5b80638c24add4146103bc5780638da5cb5b146103df57806396a9cd7d146103f057806399248ea71461040357600080fd5b80635bbb63a6116101925780636aa8d4cf116101615780636aa8d4cf1461036d57806370af093414610376578063715018a61461038957806381128c1d1461039157600080fd5b80635bbb63a6146102ee5780635e5c06e2146102f95780635ef73d581461034e5780636067bc151461035a57600080fd5b80631fda9a02116101ce5780631fda9a021461029e57806348c64e41146102c95780634ad84b34146102dc57806356891412146102e557600080fd5b806223de29146101ff5780630a1a257a14610214578063150b7a02146102525780631f014d831461027e575b600080fd5b61021261020d366004612110565b61051b565b005b61023f61022236600461222a565b600560209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b6102656102603660046121bb565b6106c8565b6040516001600160e01b03199091168152602001610249565b61023f61028c3660046120f5565b60086020526000908152604090205481565b6004546102b1906001600160a01b031681565b6040516001600160a01b039091168152602001610249565b6102126102d736600461222a565b610b7d565b61023f600b5481565b61023f600a5481565b61023f6361e5685081565b61032e6103073660046120f5565b60096020526000908152604090208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610249565b61023f64e8d4a5100081565b6102126103683660046120f5565b610cfc565b61023f61169b81565b61023f6103843660046120f5565b610ece565b610212610edf565b61023f61039f36600461222a565b600760209081526000928352604080842090915290825290205481565b6103cf6103ca3660046123cc565b610f15565b6040519015158152602001610249565b6000546001600160a01b03166102b1565b6103cf6103fe366004612433565b6110a5565b6003546102b1906001600160a01b031681565b6103cf610424366004612254565b611220565b6102126104373660046120f5565b61138d565b610212611399565b6103cf610452366004612496565b6113a2565b61023f636267dec081565b6103cf610470366004612358565b611513565b61023f6104833660046120f5565b60066020526000908152604090205481565b6002546102b1906001600160a01b031681565b6102126104b63660046120f5565b61163c565b61023f69d3c21bcecceda100000081565b6102126104da3660046120f5565b611645565b6102126104ed3660046120f5565b611657565b61023f6105003660046120f5565b6001600160a01b031660009081526009602052604090205490565b6003546001600160a01b031633146105895760405162461bcd60e51b815260206004820152602660248201527f486f70725374616b653a2053656e646572206d757374206265207778484f5052604482015265103a37b5b2b760d11b60648201526084015b60405180910390fd5b6001600160a01b03861630146106075760405162461bcd60e51b815260206004820152603760248201527f486f70725374616b653a204d7573742062652073656e64696e6720746f6b656e60448201527f7320746f20486f70725374616b6520636f6e74726163740000000000000000006064820152608401610580565b6000546001600160a01b0388811691161461067c5760405162461bcd60e51b815260206004820152602f60248201527f486f70725374616b653a204f6e6c7920616363657074206f776e657220746f2060448201526e70726f76696465207265776172647360881b6064820152608401610580565b84600b600082825461068e91906125db565b909155505060405185907f2bf52bcae319602514e02ff69bbe4b89a19718b96e7867044128ec872419437c90600090a25050505050505050565b6004546000906001600160a01b0316336001600160a01b0316146107545760405162461bcd60e51b815260206004820152603f60248201527f486f70725374616b653a2043616e6e6f7420536166655472616e73666572467260448201527f6f6d20746f6b656e73206f74686572207468616e20486f7072426f6f73742e006064820152608401610580565b636267dec04211156107c05760405162461bcd60e51b815260206004820152602f60248201527f486f70725374616b653a2050726f6772616d20656e6465642c2063616e6e6f7460448201526e103932b232b2b6903137b7b9ba399760891b6064820152608401610580565b6107c9856116ef565b6001600160a01b03851660008181526005602090815260408083206006808452828520805486529184529184208990559383529052815460019291906108109084906125db565b90915550506004805460405163562317c560e01b81529182018690526000916001600160a01b039091169063562317c59060240160206040518083038186803b15801561085c57600080fd5b505afa158015610870573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610894919061241a565b6004805460405163225b377d60e21b81529182018890529192506000916001600160a01b03169063896cddf490602401604080518083038186803b1580156108db57600080fd5b505afa1580156108ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109139190612472565b506001600160a01b0388166000908152600860205260408120549192505b81811015610adf576001600160a01b0389811660009081526007602090815260408083208584529091528082205460048054925163225b377d60e21b81529081018290529093919091169063896cddf490602401604080518083038186803b15801561099c57600080fd5b505afa1580156109b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d49190612472565b506004805460405163562317c560e01b815291820185905291925087916001600160a01b03169063562317c59060240160206040518083038186803b158015610a1c57600080fd5b505afa158015610a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a54919061241a565b1415610aca5784811015610a89576001600160a01b038b16600090815260076020908152604080832086845290915290208a90555b604051858210908b906001600160a01b038e16907f066d96cb280fccf3a0a3a5686966a801b2690a32ec98fd2711a4e09f345d935d90600090a45050610adf565b50508080610ad7906126a2565b915050610931565b81811415610b67576001600160a01b038916600081815260076020908152604080832086845282528083208c905592825260089052908120805460019290610b289084906125db565b909155505060405160019089906001600160a01b038c16907f066d96cb280fccf3a0a3a5686966a801b2690a32ec98fd2711a4e09f345d935d90600090a45b50630a85bd0160e11b9998505050505050505050565b6000546001600160a01b03163314610ba75760405162461bcd60e51b81526004016105809061254d565b60026001541415610bfa5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610580565b60026001556004546001600160a01b0383811691161415610c6b5760405162461bcd60e51b815260206004820152602560248201527f486f70725374616b653a2043616e6e6f7420636c61696d20486f7072426f6f736044820152641d0813919560da1b6064820152608401610580565b816001600160a01b03166323b872dd30610c8d6000546001600160a01b031690565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101849052606401600060405180830381600087803b158015610cdc57600080fd5b505af1158015610cf0573d6000803e3d6000fd5b50506001805550505050565b6000546001600160a01b03163314610d265760405162461bcd60e51b81526004016105809061254d565b60026001541415610d795760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610580565b60026001819055546000906001600160a01b0383811691161415610e2657600a546002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610ddd57600080fd5b505afa158015610df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e15919061241a565b610e1f9190612634565b9050610ea0565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b158015610e6557600080fd5b505afa158015610e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9d919061241a565b90505b610ec6610eb56000546001600160a01b031690565b6001600160a01b038416908361177a565b505060018055565b6000610ed9826117d1565b92915050565b6000546001600160a01b03163314610f095760405162461bcd60e51b81526004016105809061254d565b610f1360006119c7565b565b6000805b6001600160a01b038316600090815260066020526040902054811015611098576001600160a01b0383811660009081526005602090815260408083208584529091528082205460048054925163225b377d60e21b81529081018290529093919091169063896cddf490602401604080518083038186803b158015610f9c57600080fd5b505afa158015610fb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd49190612472565b50875160208901206004805460405163c588ff8b60e01b815291820186905292935090916001600160a01b03169063c588ff8b9060240160006040518083038186803b15801561102357600080fd5b505afa158015611037573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261105f91908101906122e1565b8051906020012014801561107257508086145b15611083576001935050505061109e565b50508080611090906126a2565b915050610f19565b50600090505b9392505050565b6000805b6001600160a01b038316600090815260066020526040902054811015611098576001600160a01b0383811660009081526005602090815260408083208584529091528082205460048054925163c87b56dd60e01b81529081018290529093919091169063c87b56dd9060240160006040518083038186803b15801561112d57600080fd5b505afa158015611141573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261116991908101906122e1565b6004805460405163562317c560e01b815291820185905291925088916001600160a01b03169063562317c59060240160206040518083038186803b1580156111b057600080fd5b505afa1580156111c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e8919061241a565b1480156111fa57506111fa8187611a17565b1561120b576001935050505061109e565b50508080611218906126a2565b9150506110a9565b6002546000906001600160a01b031633146112925760405162461bcd60e51b815260206004820152602c60248201527f486f70725374616b653a204f6e6c7920616363657074204c4f434b5f544f4b4560448201526b4e20696e207374616b696e6760a01b6064820152608401610580565b636267dec04211156112fe5760405162461bcd60e51b815260206004820152602f60248201527f486f70725374616b653a2050726f6772616d20656e6465642c2063616e6e6f7460448201526e1039ba30b5b29030b73cb6b7b9329760891b6064820152608401610580565b611307846116ef565b6001600160a01b0384166000908152600960205260408120805485929061132f9084906125db565b9250508190555082600a600082825461134891906125db565b909155505060405183906001600160a01b038616907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d90600090a35060019392505050565b611396816116ef565b50565b610f1333611ac0565b6000805b6001600160a01b038316600090815260066020526040902054811015611098576001600160a01b0383811660009081526005602090815260408083208584529091528082205460048054925163225b377d60e21b81529081018290529093919091169063896cddf490602401604080518083038186803b15801561142957600080fd5b505afa15801561143d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114619190612472565b506004805460405163562317c560e01b815291820185905291925088916001600160a01b03169063562317c59060240160206040518083038186803b1580156114a957600080fd5b505afa1580156114bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e1919061241a565b1480156114ed57508086145b156114fe576001935050505061109e565b5050808061150b906126a2565b9150506113a6565b60008084846040516020016115299291906124de565b604051602081830303815290604052905060005b6001600160a01b038416600090815260066020526040902054811015611630576001600160a01b0384811660009081526005602090815260408083208584529091528082205460048054925163c87b56dd60e01b81529081018290529093919091169063c87b56dd9060240160006040518083038186803b1580156115c157600080fd5b505afa1580156115d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115fd91908101906122e1565b90506116098185611a17565b1561161b57600194505050505061109e565b50508080611628906126a2565b91505061153d565b50600095945050505050565b61139681611ac0565b61164e816116ef565b61139681611c9e565b6000546001600160a01b031633146116815760405162461bcd60e51b81526004016105809061254d565b6001600160a01b0381166116e65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610580565b611396816119c7565b60006116fa826117d1565b6001600160a01b03831660009081526009602052604081206002018054929350839290919061172a9084906125db565b90915550506001600160a01b03821660008181526009602052604080822042600190910155518392917f99869d968ca3581a661f31abb3a6aa70ccec5cdc49855eab174cf9e00a2462db91a35050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526117cc908490611e2f565b505050565b6001600160a01b03811660009081526009602090815260408083208151608081018352815481526001820154938101939093526002810154918301919091526003015460608201526361e56850421115806118345750636267dec0816020015110155b156118425750600092915050565b80516000906118549061169b90612615565b905060005b6001600160a01b03851660009081526008602052604090205481101561195b576001600160a01b0385811660009081526007602090815260408083208584529091528082205460048054925163225b377d60e21b81529081018290529093919091169063896cddf490602401604080518083038186803b1580156118dc57600080fd5b505afa1580156118f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119149190612472565b50855190915081906119309069d3c21bcecceda1000000611f01565b61193a9190612615565b61194490856125db565b935050508080611953906126a2565b915050611859565b5064e8d4a5100061198b636267dec06119856361e568508660200151611f1790919063ffffffff16565b90611f01565b6119a1636267dec0611985426361e56850611f17565b6119ab9190612634565b6119b59083612615565b6119bf91906125f3565b949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051825160009184918491908490611a30908390612634565b9050600084611a40600184612634565b81518110611a5057611a506126d3565b01602001516001600160f81b0319169050602f60f81b8114611a7a57600095505050505050610ed9565b6000611a87846020612634565b611a92906008612615565b9050600080611aa08761264b565b979094016020015196821c9690911c959095149550505050505092915050565b636267dec04211611b2f5760405162461bcd60e51b815260206004820152603360248201527f486f70725374616b653a2050726f6772616d206973206f6e676f696e672c206360448201527230b73737ba103ab73637b1b59039ba30b5b29760691b6064820152608401610580565b6001600160a01b038116600090815260096020526040902054611b51826116ef565b6001600160a01b0382166000908152600960205260408120819055600a8054839290611b7e908490612634565b90915550611b8d905082611c9e565b600254611ba4906001600160a01b0316838361177a565b60005b6001600160a01b038316600090815260066020526040902054811015611c6357600480546001600160a01b038581166000818152600560209081526040808320888452909152908190205490516323b872dd60e01b815230958101959095526024850191909152604484015216906323b872dd90606401600060405180830381600087803b158015611c3857600080fd5b505af1158015611c4c573d6000803e3d6000fd5b505050508080611c5b906126a2565b915050611ba7565b5060405181906001600160a01b038416907fb21fb52d5749b80f3182f8c6992236b5e5576681880914484d7f4c9b062e619e90600090a35050565b6001600160a01b038116600090815260096020908152604080832081516080810183528154815260018201549381019390935260028101549183018290526003015460608301819052919291611cf391612634565b905060008111611d455760405162461bcd60e51b815260206004820152601b60248201527f486f70725374616b653a204e6f7468696e6720746f20636c61696d00000000006044820152606401610580565b6001600160a01b03831660009081526009602052604090206002810154600390910155600b54811115611dc65760405162461bcd60e51b8152602060048201526024808201527f486f70725374616b653a20496e73756666696369656e7420726577617264207060448201526337b7b61760e11b6064820152608401610580565b80600b6000828254611dd89190612634565b9091555050600354611df4906001600160a01b0316848361177a565b60405181906001600160a01b038516907fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a90600090a3505050565b6000611e84826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611f279092919063ffffffff16565b8051909150156117cc5780806020019051810190611ea291906122bf565b6117cc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610580565b6000818310611f10578161109e565b5090919050565b600081831015611f10578161109e565b60606119bf848460008585843b611f805760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610580565b600080866001600160a01b03168587604051611f9c91906124c2565b60006040518083038185875af1925050503d8060008114611fd9576040519150601f19603f3d011682016040523d82523d6000602084013e611fde565b606091505b5091509150611fee828286611ff9565b979650505050505050565b6060831561200857508161109e565b8251156120185782518084602001fd5b8160405162461bcd60e51b8152600401610580919061251a565b6000612045612040846125b3565b612582565b905082815283838301111561205957600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b038116811461208757600080fd5b919050565b60008083601f84011261209e57600080fd5b50813567ffffffffffffffff8111156120b657600080fd5b6020830191508360208285010111156120ce57600080fd5b9250929050565b600082601f8301126120e657600080fd5b61109e83833560208501612032565b60006020828403121561210757600080fd5b61109e82612070565b60008060008060008060008060c0898b03121561212c57600080fd5b61213589612070565b975061214360208a01612070565b965061215160408a01612070565b955060608901359450608089013567ffffffffffffffff8082111561217557600080fd5b6121818c838d0161208c565b909650945060a08b013591508082111561219a57600080fd5b506121a78b828c0161208c565b999c989b5096995094979396929594505050565b6000806000806000608086880312156121d357600080fd5b6121dc86612070565b94506121ea60208701612070565b935060408601359250606086013567ffffffffffffffff81111561220d57600080fd5b6122198882890161208c565b969995985093965092949392505050565b6000806040838503121561223d57600080fd5b61224683612070565b946020939093013593505050565b60008060006060848603121561226957600080fd5b61227284612070565b925060208401359150604084013567ffffffffffffffff81111561229557600080fd5b8401601f810186136122a657600080fd5b6122b586823560208401612032565b9150509250925092565b6000602082840312156122d157600080fd5b8151801515811461109e57600080fd5b6000602082840312156122f357600080fd5b815167ffffffffffffffff81111561230a57600080fd5b8201601f8101841361231b57600080fd5b8051612329612040826125b3565b81815285602083850101111561233e57600080fd5b61234f826020830160208601612672565b95945050505050565b60008060006060848603121561236d57600080fd5b833567ffffffffffffffff8082111561238557600080fd5b612391878388016120d5565b945060208601359150808211156123a757600080fd5b506123b4868287016120d5565b9250506123c360408501612070565b90509250925092565b6000806000606084860312156123e157600080fd5b833567ffffffffffffffff8111156123f857600080fd5b612404868287016120d5565b935050602084013591506123c360408501612070565b60006020828403121561242c57600080fd5b5051919050565b60008060006060848603121561244857600080fd5b83359250602084013567ffffffffffffffff81111561246657600080fd5b6123b4868287016120d5565b6000806040838503121561248557600080fd5b505080516020909101519092909150565b6000806000606084860312156124ab57600080fd5b83359250602084013591506123c360408501612070565b600082516124d4818460208701612672565b9190910192915050565b600083516124f0818460208801612672565b602f60f81b908301908152835161250e816001840160208801612672565b01600101949350505050565b6020815260008251806020840152612539816040850160208701612672565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b604051601f8201601f1916810167ffffffffffffffff811182821017156125ab576125ab6126e9565b604052919050565b600067ffffffffffffffff8211156125cd576125cd6126e9565b50601f01601f191660200190565b600082198211156125ee576125ee6126bd565b500190565b60008261261057634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561262f5761262f6126bd565b500290565b600082821015612646576126466126bd565b500390565b8051602080830151919081101561266c576000198160200360031b1b821691505b50919050565b60005b8381101561268d578181015183820152602001612675565b8381111561269c576000848401525b50505050565b60006000198214156126b6576126b66126bd565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212205b684efa8e233e1f11428f6274d12b8ebf723e5538d70adb8c088f6de384207264736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimRewards(address)": {
        "details": "Sync rewards and claim them",
        "params": {
          "account": "address Account whose stake rewards will be synced and claimed."
        }
      },
      "constructor": {
        "details": "Provide NFT contract address. Transfer owner role to the new owner address.  At deployment, it also registers the lock contract as an ERC777 recipient.",
        "params": {
          "_lockToken": "address Address of the stake token xHOPR.",
          "_newOwner": "address Address of the new owner. This new owner can reclaim any ERC20 and ERC721 token being accidentally sent to the lock contract. ",
          "_nftAddress": "address Address of the NFT contract.",
          "_rewardToken": "address Address of the reward token wxHOPR."
        }
      },
      "getCumulatedRewardsIncrement(address)": {
        "details": "Returns the increment of cumulated rewards during the “lastSyncTimestamp” and current block.timestamp. ",
        "params": {
          "_account": "address Address of the account whose rewards will be calculated."
        }
      },
      "isNftTypeAndRankRedeemed1(string,string,address)": {
        "details": "Given NFT name type and rank name (as in HoprBoost) returns if the hodler has redeemed such an NFT ",
        "params": {
          "hodler": "address Address of an account that stakes xHOPR tokens and/or redeems its HoprBoost NFT.",
          "nftRank": "string Rank name of the HoprBoost NFT.",
          "nftType": "string Type name of the HoprBoost NFT."
        }
      },
      "isNftTypeAndRankRedeemed2(uint256,string,address)": {
        "details": "Given NFT type index and rank name (as in HoprBoost) returns if the hodler has redeemed such an NFT ",
        "params": {
          "hodler": "address Address of an account that stakes xHOPR tokens and/or redeems its HoprBoost NFT.",
          "nftRank": "string Rank name of the HoprBoost NFT.",
          "nftTypeIndex": "uint256 Type index of the HoprBoost NFT."
        }
      },
      "isNftTypeAndRankRedeemed3(uint256,uint256,address)": {
        "details": "Given NFT type index and the boost numerator (as in HoprBoost) returns if the hodler has redeemed such an NFT ",
        "params": {
          "boostNumerator": "uint256 Boost numerator of the HoprBoost NFT.",
          "hodler": "address Address of an account that stakes xHOPR tokens and/or redeems its HoprBoost NFT.",
          "nftTypeIndex": "uint256 Type index of the HoprBoost NFT."
        }
      },
      "isNftTypeAndRankRedeemed4(string,uint256,address)": {
        "details": "Given NFT type name and the boost numerator (as in HoprBoost) returns if the hodler has redeemed such an NFT ",
        "params": {
          "boostNumerator": "uint256 Boost numerator of the HoprBoost NFT.",
          "hodler": "address Address of an account that stakes xHOPR tokens and/or redeems its HoprBoost NFT.",
          "nftType": "string Type name of the HoprBoost NFT."
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Whenever a boost `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} when redeeming, this function is called. Boost factor associated with the  It must return its Solidity selector to confirm the token transfer upon success.",
        "params": {
          "data": "bytes hex information provided by the token holder (if any)",
          "from": "address token holder address",
          "operator": "address operator requesting the transfer",
          "tokenId": "uint256 amount of tokens to transfer"
        }
      },
      "onTokenTransfer(address,uint256,bytes)": {
        "details": "ERC677 hook. Token holders can send their tokens with `transferAndCall` to the stake contract.   After PROGRAM_END, it refuses tokens; Before PROGRAM_END, it accepts tokens xHOPR token, sync  Account state, and update totalLocked. ",
        "params": {
          "_data": "bytes Data being sent along with token transfer",
          "_from": "address Address of tokens sender",
          "_value": "uint256 token amount being transferred"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "reclaimErc20Tokens(address)": {
        "details": "Reclaim any ERC20 token being accidentally sent to the contract.",
        "params": {
          "tokenAddress": "address ERC20 token address."
        }
      },
      "reclaimErc721Tokens(address,uint256)": {
        "details": "Reclaim any ERC721 token being accidentally sent to the contract.",
        "params": {
          "tokenAddress": "address ERC721 token address."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "stakedHoprTokens(address)": {
        "details": "Shortcut that returns the actual stake of an account. ",
        "params": {
          "_account": "address Address of the staker account."
        }
      },
      "sync(address)": {
        "details": "Manually sync account's reward states",
        "params": {
          "account": "address Account whose stake rewards will be synced."
        }
      },
      "tokensReceived(address,address,address,uint256,bytes,bytes)": {
        "details": "ERC777 hook. To receive wxHOPR to fuel the reward pool with `send()` method. It updates the availableReward by tokenAmount.",
        "params": {
          "amount": "uint256 amount of tokens to transfer",
          "from": "address token holder address",
          "operator": "address operator requesting the transfer",
          "operatorData": "bytes extra information provided by the operator (if any)",
          "to": "address recipient address",
          "userData": "bytes hex information provided by the token holder (if any)"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlock()": {
        "details": "Unlock staking for caller"
      },
      "unlockFor(address)": {
        "details": "Unlock staking for a given account",
        "params": {
          "account": "address Account that staked tokens."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimRewards(address)": {
        "notice": "public function of ``_sync`` + ``_claim``"
      },
      "sync(address)": {
        "notice": "public function of ``_sync``."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 565,
        "contract": "contracts/HoprStake2.sol:HoprStake2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 672,
        "contract": "contracts/HoprStake2.sol:HoprStake2",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7175,
        "contract": "contracts/HoprStake2.sol:HoprStake2",
        "label": "LOCK_TOKEN",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7178,
        "contract": "contracts/HoprStake2.sol:HoprStake2",
        "label": "REWARD_TOKEN",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7184,
        "contract": "contracts/HoprStake2.sol:HoprStake2",
        "label": "NFT_CONTRACT",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IHoprBoost)8394"
      },
      {
        "astId": 7190,
        "contract": "contracts/HoprStake2.sol:HoprStake2",
        "label": "redeemedNft",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 7194,
        "contract": "contracts/HoprStake2.sol:HoprStake2",
        "label": "redeemedNftIndex",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7200,
        "contract": "contracts/HoprStake2.sol:HoprStake2",
        "label": "redeemedFactor",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 7204,
        "contract": "contracts/HoprStake2.sol:HoprStake2",
        "label": "redeemedFactorIndex",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7209,
        "contract": "contracts/HoprStake2.sol:HoprStake2",
        "label": "accounts",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(Account)7157_storage)"
      },
      {
        "astId": 7211,
        "contract": "contracts/HoprStake2.sol:HoprStake2",
        "label": "totalLocked",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 7213,
        "contract": "contracts/HoprStake2.sol:HoprStake2",
        "label": "availableReward",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IHoprBoost)8394": {
        "encoding": "inplace",
        "label": "contract IHoprBoost",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Account)7157_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct HoprStake2.Account)",
        "numberOfBytes": "32",
        "value": "t_struct(Account)7157_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Account)7157_storage": {
        "encoding": "inplace",
        "label": "struct HoprStake2.Account",
        "members": [
          {
            "astId": 7150,
            "contract": "contracts/HoprStake2.sol:HoprStake2",
            "label": "actualLockedTokenAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7152,
            "contract": "contracts/HoprStake2.sol:HoprStake2",
            "label": "lastSyncTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7154,
            "contract": "contracts/HoprStake2.sol:HoprStake2",
            "label": "cumulatedRewards",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7156,
            "contract": "contracts/HoprStake2.sol:HoprStake2",
            "label": "claimedRewards",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}